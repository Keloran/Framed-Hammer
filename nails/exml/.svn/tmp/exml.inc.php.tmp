<?php
/**
 * Exml
 *
 * @package
 * @author keloran
 * @copyright Copyright (c) 2010
 * @version $Id$
 * @access public
 */
class Exml {
	/** Objects **/
	private $oNails;
	private $oDB;
	private $oXML;

	/** Static Object **/
	private static $oExml;

	/** Variables **/
	private $cFile;
	private $cRoot	= "hammer";
	private $cType	= "dev";

	/** Pointers **/
	private $pFile;
	private $aPath;

	/**
	 * Constructor
	 */
	public function __construct() {
	}

	/**
	 * Exml::getInstance()
	 *
	 * @param Nails $oNails
	 * @return object
	 */
	public static function getInstance() {
		if (is_null(self::$oExml)) {
			self::$oExml = new Exml();
		}

		return self::$oExml;
	}

	/**
	 * Exml::__set()
	 *
	 * @param string $cName
	 * @param mixed $mValue
	 * @return null
	 */
	public function __set($cName, $mValue) {
		$this->$cName = $mValue;
	}

	/**
	 * Exml::__get()
	 *
	 * @param string $cName
	 * @return mixed
	 */
	public function __get($cName) {
		return $this->$cName;
	}

	/**
	 * Exml::setRoot()
	 *
	 * @param string $cRoot
	 * @return null
	 */
	public function setRoot($cRoot) {
		$this->cRoot	= $cRoot;
	}

	/**
	 * Exml::setFile()
	 *
	 * @param string $cFile
	 * @return null
	 */
	public function setFile($cFile, $bAbsolute = null) {
		$this->cFile	= $cFile;

		if (!$bAbsolute) {
			$cRealFile	= SITEPATH . "/" . $cFile . ".xml";
		} else {
			$cRealFile	= $cFile;
		}


		if (file_exists($cRealFile)) {
			$this->pFile	= file_get_contents($cRealFile);
			$this->oXML		= simplexml_load_string($this->pFile);
		} else {
			$cRoot		= "<" . $this->cRoot . "></" . $this->cRoot . ">";
			$this->oXML	= simplexml_load_string($cRoot);
		}
	}

	/**
	 * Exml::setRemoteFile()
	 *
	 * @param string $cFile
	 * @return null
	 */
	public function setRemoteFile($cFile) {
		$this->cFile	= $cFile;
		$this->pFile 	= file_get_contents($cFile);
		$this->oXML		= simplexml_load_string($this->pFile);
	}

	/**
	 * Exml::setElementType()
	 *
	 * @param string $cType
	 * @return null
	 */
	public function setElementType($cType) {
		$this->cType = $cType;
	}

	/**
	 * Exml::addElement()
	 *
	 * @param string $cElement
	 * @param string $cValue
	 * @param string $cParent
	 * @return null
	 */
	public function addElement($cElement, $cValue = null, $cParent = null) {
		if ($cParent) {
			$oElement	= $this->getElement($cParent, false, true);
		} else {
			$oElement	= $this->oXML;
		}

		//Check if the element exists already if so we want to replace it
		$oNewElement = $this->getElement($cElement, false, true);
		if (!$oNewElement) {
			$oElement->addChild($cElement, $cValue);
		} else {
			//Take the old Element, and remove it
			$oOld			= dom_import_simplexml($oNewElement);
			$oOldList		= $oOld->getElementsByTagName($cElement);
			foreach ($oOldList as $oList) {
				$oOld->removeChild($oList);
			}

			//Create the new document
			$oDom		= New DomDocument("1.0", "UTF-8");
			$oDom->preserveWhiteSpace	= false;
			$oDom->formatOutput			= true;
			$oDom->loadXML($this->oXML->asXML());
			#$oDom->save($this->cFile);

			//now reload and add the new node
			$this->addElement($cElement, $cValue, $cParent);
		}
	}

	/**
	 * Exml::getElement()
	 *
	 * @param string $cElement
	 * @return mixed
	 */
	public function getElement($cElement, $cParent = null, $bAdd = null) {
		$mReturn	= false;
		$cType		= $this->cType;
		$aRoute		= false;

		//get the element
		if (isset($this->oXML->$cElement)) { //must be a root element
			$mReturn	= $this->oXML->$cElement;

		//Not a root element, maybe its part of a type
		} else if (isset($this->oXML->$cType->$cElement)) {
			$mReturn	= $this->oXML->$cType->$cElement;

		//k so this element must be in a child
		} else {
			if ($cParent) {
				//check if the element is off the root
				if (isset($this->oXML->$cType->$cParent)) {
					$oParent = $this->oXML->$cType->$cParent;
				} else {
					$oParent = $this->getChild($cParent);
				}
			} else {
				$oParent = false;
			}

			$mReturn	= $this->getChild($cElement, $oParent, $bAdd);
		}

		//We need the object to add elements to it
		if (!$bAdd) {
			//is this 4 levels deep, cause it seems to break
			if (is_object($mReturn)) {
				if ($mReturn->getName() == $cElement) {
					$aReturn = (array)$mReturn;
					$iReturn = count($aReturn);
					if ($iReturn >= 2) {
						$mReturn = $this->makeArray($mReturn);
					} else {
						foreach ($aReturn as $cKeyed => $cValued) {
							$mReturn = $cValued;
						}
					}
				}
			}
		}

		return $mReturn;
	}

	/**
	 * Exml::makeArray()
	 *
	 * @param object $oObject
	 * @return array
	 */
	private function makeArray($oObject) {
		$mReturn	= (array)$oObject;

		//turn it into an array
		foreach ($oObject as $oName => $oValue) {
			$cName	= (string)$oName;

			if (is_object($oValue)) {
				if ($oValue->children()) {
					$mValue = $this->makeArray($oValue);
				} else {
					$mValue = (array)$oValue;

					//its a single item, so remove array
					if (!isset($mValue[1])) {
						if (isset($mValue[0])) {
							$mValue = $mValue[0];
						}
					}
				}
			}

			if (isset($mValue)) {
				$mReturn[$cName] = $mValue;
			}
		}

		return $mReturn;
	}

	/**
	 * Exml::hasAttributes()
	 *
	 * @param object $oElement
	 * @return mixed
	 */
	private function getAttributes($oElement) {
		$mReturn	= false;
		if ($oElement->attributes()) {
			foreach ($oElement->attributes() as $cName => $cValue) {
				$cName	= (string)$cName;
				$cValue	= (string)$cValue;

				$mReturn[$cName] = $cValue;
			}
		}

		return $mReturn;
	}

	/**
	 * Exml::getChild()
	 *
	 * @param string $cElement
	 * @param string $cParent
	 * @return mixed
	 */
	private function getChild($cElement, $mParent = null, $bAdd = null) {
		$mReturn	= false;
		$cType		= $this->cType;

		if ($mParent) {
			if (isset($this->oXML->$mParent)) {
				$oXML	= $this->oXML->$mParent;
			} else if (isset($this->oXML->$cType->$mParent)) {
				$oXML	= $this->oXML->$cType->$mParent;
			} else {
				if (is_object($mParent)) {
					$oXML	= $mParent;
				} else {
					$oXML	= $this->getChild($mParent, $bAdd);
				}
			}

			//its not an object, so it must have come to the end
			if (!is_object($oXML)) { return false; }
		} else {
			#$oXML	= $this->oXML;
			$oXML = $this->oXML->$cType;
		}

<<<<<<< .mine
		if ($oXML->getName() == "") { return false; }

=======
>>>>>>> .r1424
		//This element is here
		if (isset($oXML->$cElement)) {
			$mReturn    = $oXML->$cElement;
		} else {
			if ($oXML->children()) {
				foreach ($oXML->children() as $oChild => $oKid) {
					//It must be the last element
					$aKid	= (array)$oKid;
					$cKid	= (string)$oKid;
					$cChild	= (string)$oChild;

					if (isset($aKid[$cElement])) {
						$mAttr = $this->getAttributes($oKid->$cElement);

						if (!$bAdd) {
							if ($mAttr) {
								$mReturn[] 	= $aKid[$cElement];
								$mReturn[]	= $mAttr;
							} else {
								$mReturn = $aKid[$cElement];
							}
						} else {
							$mReturn = $oKid;
						}
					} else if ($cKid == $cElement) {
						if (!$bAdd) {
							$mReturn = $cKid;
						} else {
							$mReturn = $oKid;
						}
					} else {
						//Its not the end yet
						$mReturn = $this->getChild($cElement, $oChild, $bAdd);
					}
					if ($mReturn) { break; }
				}
			} else {
				$mReturn = $oXML;
			}
		}

		return $mReturn;
	}

	/**
	 * Exml::saveIt()
	 *
	 * @return bool
	 */
	public function saveIt() {
		$cXML		= $this->oXML->asXML();
		$bReturn	= file_put_contents($this->cFile, $cXML);

		return $bReturn;
	}
}
