<?php
/**
 * Database
 *
 * @package
 * @author Max
 * @copyright Copyright (c) 2008
 * @version $Id: database.inc.php 288 2009-11-27 14:28:13Z keloran $
 * @access public
 */
#namespace Hammer\Database;

class Database {
	protected $aWrite 	= false;
	protected $aRead	= false;
	protected $aConfig	= false;

	private $oDB		= false;
	private $oQuery		= false;
	private $iRow		= false;
	private	$oHammer	= false;

	private $bCheckedREAD	= false;
	private $bCheckedWRITE	= false;
	private $bChecked		= false;
	private $iConnect	= false;

	public 	$cDatabase	= false;
	public	$cQuery		= false;
	public	$mEscape	= false;

	static $oDBi		= false;

	/**
	 * Database::__construct()
	 *
	 * @param array $aConfig
	 * @param bool $bReadOnly
	 */
	function __construct($aConfig = false, $bReadOnly = false) {
		if (!$aConfig) {
			$oHammer = Hammer::getHammer();

			$aConfig['read']	= $oHammer->getConfig("databases", "read");
			$aConfig['write']	= $oHammer->getConfig("databases", "write");
		}

		$this->aConfig		= $aConfig;

		//its a readonly so dont do the write check
		if ($bReadOnly) {
			$this->cDatabase	= $aConfig['read']['database'];
		} else {
			$this->cDatabase	= $aConfig['write']['database'];
		}
	}

	static function getInstance($aConfig = false) {
		if (!self::$oDBi) {
			self::$oDBi = new Database($aConfig);
		}

		return self::$oDBi;
	}

    /**
     * Database::getActiveServer()
     *
     * @param mixed $mServers
     * @return
     */
    private function getActiveServer($mServers, $cType = false) {
     	if (!isset($mServers['hostname'])) {
        	//Shuffle the array, then use the last one, and pop if it fails
		shuffle($mServers);
        	$iCount		= count($mServers);
        	$iLast		= $iCount - 1;

	        $iPort		= isset($mServers[$iLast]['port']) ? $mServers[$iLast]['port'] : 3306;

		if ($this->iConnect) {
			$iConnect	= $this->iConnect;
		} else {
			$iConnected	= @fsockopen(addslashes($mServers[$iLast]['hostname']), addslashes($iPort), $iErr, $cErr, 5);
			$this->iConnect	= $iConnected;
			$iConnect	= $this->iConnect;
		}

            if (isset($iConnect)) {
            	return $mServers[$iLast];
	    } else {
    	      	array_pop($mServers);
        	$this->getActiveServer($mServers, $cType);
            }
        }

		return $mServers;
    }

	/**
	 * Database::getConnection()
	 *
	 * @param int $iType
	 * @return
	 */
	private function getConnection($iType) {
		if ($iType == 1) {
			$aDatabaseConfig = $this->getActiveServer($this->aConfig['read'], "READ");
		} else if ($iType == 2) {
			$aDatabaseConfig = $this->getActiveServer($this->aConfig['write'], "WRITE");
		}

		if (!$aDatabaseConfig) {
			throw new Spanner("All the databases are down");
		}

		if (!$this->oDB) {
			if (isset($this->aConfig['engine'])) {
				switch ($this->aConfig['engine']) {
					case "pgsql":
						$this->oDB = new Database_PGSQL($aDatabaseConfig);
						break;

					case "sqlite":
					case "sqlite2":
					case "sqlite3":
						$this->oDB =  new Database_SQLite($aDatabaseConfig);
						break;

					case "mysqli":
					case "mysql":
					default:
						$this->oDB = new Database_MySQL($aDatabaseConfig);
						break;
				}
			} else {
				//MySQLi
				$this->oDB = new Database_MySQL($aDatabaseConfig);
			}
		}

		return true;
	}

	/**
	 * Database::write()
	 *
	 * @param string $cQueryString
	 * @param mixed $mEscape
	 * @return
	 */
	public function write($cQueryString, $mEscape = false) {
		$this->getConnection(2);
		$cQueryString = trim($cQueryString);

		$this->cQuery	= $cQueryString;
		$this->mEscape	= $mEscape;

		$this->oQuery	= $this->oDB->queryWrite($cQueryString, $mEscape);
		$this->iRow	= 0;
	}

	/**
	 * Database::read()
	 *
	 * @param string $cQueryString
	 * @param mixed $mEscape
	 * @return
	 */
	public function read($cQueryString, $mEscape = false) {
		$this->getConnection(1);
		$cQueryString = trim($cQueryString);

		$this->cQuery	= $cQueryString;
		$this->mEscape	= $mEscape;

		$this->oQuery	= $this->oDB->queryRead($cQueryString, $mEscape);
		$this->iRow	= 0;
	}

	/**
	 * Database::nextRecord()
	 *
	 * @desc this is to return the full resultset
	 * @return array
	 */
	public function nextRecord() {
		$this->aResult	= $this->oDB->nextRecord($this->oQuery);
		$this->iRow	+= 1;

		return $this->aResult;
	}

	/**
	 * Database::f()
	 *
	 * @desc this is to grab the field from the resultset
	 * @param string $cName
	 * @return mixed
	 */
	public function f($cName) {
		return $this->field($cName);
	}

	/**
	* Database::field()
	*
	* @desc This is a symlink to f() to make it abit easier to learn
	* @param string $cName
	* @return mixed
	*/
	public function field($cName) {
		if (isset($this->aResult[$cName])) {
			return stripslashes($this->aResult[$cName]);
		} else {
			return false;
		}
	}

	/**
	 * Database::insertID()
	 *
	 * @desc this is to grab the latest insertid from the query
	 * @return int
	 */
	public function insertID() {
		return $this->oDB->insertID();
	}

	/**
	* Database::printQuery()
	*
	* @desc this is for debugging
	* @return string
	*/
	public function printQuery() {
		$cJoined	= $this->cQuery;

		if ($this->mEscape) {
            if (is_array($this->mEscape)) {
                for ($i = (count($this->mEscape) - 1); $i >= 0; $i--) {
                    $cJoined = str_replace("?" . $i, $this->mEscape[$i], $cJoined);
                }
            } else {
				$cJoined = str_replace("?", $this->mEscape, $this->cQuery);
            }
        }

		$cReturn  = "<br /><br />Query: " . $this->cQuery;
		$cReturn .= "<br />Escape: " . print_r($this->mEscape, true);
		$cReturn .= "<br />Joined: " . $cJoined;

		return printRead($cReturn);
	}

	/**
	* Database::__destruct()
	*
	*/
	function __destruct() {
		if ($this->oDB) {
			$this->oDB->freeResult();
		}
	}

	/**
	* Database killConnection()
	*
	* @desc this is to destroy the connection, usually called when your done with it
	*/
	public function killConnection() {
		if ($this->oDB) {
			$this->oDB->freeResult();
		}
	}
}
