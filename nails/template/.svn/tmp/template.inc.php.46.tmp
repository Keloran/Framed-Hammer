<?php
/**
 * Template
 *
 * @package
 * @author Max
 * @copyright Copyright (c) 2008
 * @version $Id: templates.inc.php 498 2010-02-20 13:09:57Z keloran $
 * @access public
 */
class Template {
	public $cTemplate		= false;
	public $aVars			= array();
	public $cJS				= false;
	public $cExtraJS		= false;
	public $cPagination		= false;
	public $bDeleted		= false;

	//override and get a different structure for hte homepage
	public $bStructOverride	= false;
	public $cOverride		= false;

    //Sub templates so that templates themselves dont need todo buisness
    private $aSubTemplates	= false;
    private $cTemp			= false;
    private $cFolder		= false;
	private $cOrigFolder	= false;
	private $cDefault		= false;

    private $cSiteCalled	= false;

    static $oTemplate;
    public $oForms			= false;

	//decouple
	public $oNails			= false;
	private $cPage			= false;
	private $cAction		= false;
	private $cChoice		= false;
	private $cLang			= false;
	public $cBrand			= false;
	private $cError			= false;
	private $iPage			= false;
	private $cSkin			= false;

	//Skin Settings
	private $cSkinSetting	= false;

	/**
	 * Template::__construct()
	 *
	 */
	function __construct($aParams, $cSite = false, $cSkinSetting = false) {
		if ($cSite) {			$this->cSiteCalled 	= $cSite; }
		if ($cSkinSetting) {	$this->cSkinSetting	= $cSkinSetting; } else { $this->cSkinSetting = "brand"; }

		$this->aParams		= $aParams;
		foreach ($aParams as $cName => $cValue){
			$this->$cName	= $cValue;
		}

		//Add the error from hammer (others) into the vars
		$this->setVars("error", $this->cError);

		//Now we have a setting
		$cSkin			= "c" . ucfirst($this->cSkinSetting);
		if (isset($this->$cSkin)) {
			$this->cSkin	= $this->$cSkin;
		}
	}

	/**
	 * Template::getInstance()
	 *
	 * @return
	 */
	static function getInstance($aParams, $cSite = false, $cSkinSetting = false) {
		if (is_null(self::$oTemplate)) {
			self::$oTemplate = new Template($aParams, $cSite, $cSkinSetting);
		}

		return self::$oTemplate;
	}

	private function getMainPageNew($cDefault = null, $bEcho = null) {
		$cReturn = "<div id=\"mainArea\">\n";

		//page
		if (!$this->cPage) {
			if ($cDefault) {
				if ($cDefault) {
					$cPage 			= PAGES . $cDefault . "/" . $cDefault . ".php";
					$this->cPage	= $cDefault;
					$this->cDefault	= $cDefault;
				} else {
					$cPage 			= PAGES . "news/news.php";
					$this->cPage	= "news";
					$this->cDefault	= "news";
				}
			}
		} else {
			$cPaged	= PAGES . $this->cPage . "/" . $this->cPage . ".php";

			if (file_exists($cPaged)) {
				$cPage = $cPaged;
			} else {
				$this->cError = "Sorry " . $this->cPage . " doesn't exist";
			}
		}

		//action
		if ($this->cAction) {
			$cPaged1	= PAGES . $this->cPage . "/" . $this->cPage . ucfirst($this->cAction) . ".php";
			$cPaged2	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cAction . ".php";

			if (file_exists($cPaged1)) {
				$cPage = $cPaged1;
			} else if (file_exists($cPaged2)) {
				$cPage = $cPaged2;
			}
		}

		//choice
		if ($this->cChoice) {
			$cPaged1	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cAction . ucfirst($this->cChoice) . ".php";
			$cPaged2	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cAction . "/" . $this->cChoice . ".php";
			$cPaged3	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . "/" . $this->cChoice . ".php";

			if (file_exists($cPaged1)) {
				$cPage = $cPaged1;
			} else if (file_exists($cPaged2)) {
				$cPage = $cPaged2;
			} else if (file_exists($cPaged3)) {
				$cPage = $cPaged3;
			}
		}

		//others
		if (isset($this->extraParams) && ($this->extraParams)) {
			for ($i = $this->extraParams; $i >= 0; $i--) {
				$cParam = "cParam" . $i;

				if (isset($this->$cParam)) {
					$cParam1	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . "/" . $this->$cParam . ".php";
					$cParam2	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . "/" . $this->$cParam . "/" . $this->$cParam . ".php";

					if (file_exists($cParam1)) {
						$cPage = $cParam1;
						break;
					} else if (file_exists($cParam2)) {
						$cPage = $cParam2;
						break;
					}
				}
			}
		}

		//do something with it now
		if (isset($cPage)) {
			$this->cTemplate = $cPage;
			$cReturn .= $this->renderTemplate();
		} else {
			$cReturn .= $this->cError;
		}

		//close the div
		$cReturn .= "</div>\n";

		//Echo it rather htan returning
		if ($bEcho) {
			echo $cReturn;
		} else {
			return $cReturn;
		}
	}

	/**
	 * Template::getMainPage()
	 *
	 * @param string $cDefault The Default page, e.g. News
	 * @param bool $bEcho Echo it rather than asking to be returned
	 * @desc This thows the main page to the renderer
	 * @return
	 */
	function getMainPage($cDefault = false, $bEcho = false) {
		return $this->getMainPageNew($cDefault, $bEcho);

	    $cReturn = "<div id=\"mainArea\">\n";

	    if (!$this->cPage) {
	            if ($cDefault) {
        	        $cPage = PAGES . $cDefault . "/" . $cDefault . ".php";
                	$this->cPage = $cDefault;
	            } else {
        	        $cPage = PAGES . "news/news.php";
                	$this->cPage = "news";
 	           }
        } else {
        	//The Page requested doesnt exist
        	if (!file_exists(PAGES . $this->cPage . "/" . $this->cPage . ".php")) {
        		$this->cError = "Sorry that page doesn't seem to exist";
        	}

        	if ($this->cAction) { //An Action has been asked for inside hte file
        		if ($this->cChoice) { // choice has been asked inside the action
        			if (file_exists(PAGES . $this->cPage . "/" . $this->cAction . ucfirst($this->cChoice) . ".php")) { //The page exists, so its not inside the action file
        				$cPage = PAGES . $this->cPage . "/" . $this->cAction . ucfirst($this->cChoice) . ".php";
        			} else if (file_exists(PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . ".php")) { //Action folder exists, e.g. /admin/news/
        				$cPage = PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . ".php";
        			} else if (file_exists(PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . "/" . $this->cChoice . ".php")) { //choice file is in its own folder, this extra customization required
        				$cPage = PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . "/" . $this->cChoice . ".php";
        			} else if (file_exists(PAGES . $this->cPage . "/" . $this->cAction . ".php")) { //this is incase the variable is used inside the action file
        				$cPage = PAGES . $this->cPage . "/" . $this->cAction . ".php";
        			} else { //the action and the choice are used in the main file
        				$cPage = PAGES . $this->cPage . "/" . $this->cPage . ".php";
        			}
        		} else { // No choice has been chosen
        			if (file_exists(PAGES . $this->cPage . "/" . $this->cAction . ".php")) { // does the action file actually exist
        				$cPage = PAGES . $this->cPage . "/" . $this->cAction . ".php";
        			} else if (file_exists(PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cAction . ".php")) { //extra customization
        				$cPage = PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cAction . ".php";
        			} else { //The action file doesnt exist, eitehr the action is unknown, or the page file is so small that the action file isnt needed
        				$cPage = PAGES . $this->cPage . "/" . $this->cPage . ".php";
        			}
        		}
        	} else { //No action chosen so its the base file asked for
        		$cPage = PAGES . $this->cPage . "/" . $this->cPage . ".php";
        	}
        }

        if (isset($cPage)) {
            $this->cTemplate = $cPage;
            $cReturn .= $this->renderTemplate();
        }

		$cReturn .= "</div>\n";

		//Echo it rather htan returning
		if ($bEcho) {
			echo $cReturn;
		} else {
	        return $cReturn;
	    }
	}

	/**
	* Template::getCore()
	*
	* @param string $cPage
	* @param bool $bEcho this is incase we dont want to use echo inside the struct
	* @return string
	*/
	function getCore($cPage, $bEcho = null) {
		if (is_dir(SITEPATH . "/layout")) {
			$cLayoutFolder = "/layout/";
		} else {
			$cLayoutFolder = "/core/";
		}

		$cRootLayoutFolder = $cLayoutFolder;

		//since there is a skin/brand in use, we might want different stuff
		if ($this->cSkinSetting) {
			$cExtraFolder	= $this->cSkinSetting . "/";
		} else if ($this->cSkin) {
			$cExtraFolder	= $this->cSkin . "/";
		} else if ($this->cBrand) {
			$cExtraFolder	= $this->cBrand . "/";
		} else {
			$cExtraFolder = "";
		}

		//sometimes there is a layout folder in a page
		if (is_dir(PAGES . "/" . $this->cPage . "/layout")) {
			if ($this->cPage != "images") {
				$cLayoutFolder	= "/" . $this->cPage . "/layout/";
				$bPageLayout	= true;
			}
		} else {
			$bPageLayout	= false;
		}

		//Since we might want specific cores for a skin/brand
		if ($bPageLayout) {
			if (file_exists(PAGES . $cLayoutFolder . $cExtraFolder . $cPage . ".php")) {
				$this->cTemplate = PAGES . $cLayoutFolder . $cExtraFolder . $cPage . ".php";
			} else if (file_exists(PAGES . $cLayoutFolder . $cPage . ".php")) {
				$this->cTemplate = PAGES . $cLayoutFolder . $cPage . ".php";
			} else {
				$this->cTemplate = SITEPATH . $cRootLayoutFolder . $cPage . ".php";
			}
		} else {
			if (file_exists(SITEPATH . $cLayoutFolder . $cExtraFolder . $cPage . ".php")) {
				$this->cTemplate = SITEPATH . $cLayoutFolder . $cExtraFolder . $cPage . ".php";
			} else {
				$this->cTemplate = SITEPATH . $cLayoutFolder . $cPage . ".php";
			}
		}

		//We want to echo it, to make structure.struct pages nicer
		if ($bEcho) {
			echo $this->renderTemplate();
		} else {
			return $this->renderTemplate();
		}
	}

	/**
	* Template::indexTemplate()
	*
	* @param string $cTemplate
	* @desc This is for old sites, dont use for new ones
	*/
	function indexTemplate($cTemplate) {
		$this->cTemplate = SITEPATH . "/templates/" . $cTemplate . ".tpl";

		return $this->renderTemplate();
	}

	/**
	 * Template::getStructure()
	 *
	 * @param string $cStructure
	 * @return string
	 */
	function getStructure($cStructure = null) {
		$oStruct = new Template_Structure($this->aParams, $cStructure);

		$oStruct->setTemplate($cStructure);
		$oStruct->createTemplate();

		return $oStruct->renderTemplate();
	}

	/**
	* Template::setCoreTemplate();
	*
	* @param string $cTemplate
	* @return null
	*/
	function setCoreTemplate($cTemplate = false) {
		if (is_dir(SITEPATH . "/layout")) {
			$cLayoutFolder	= "/layout/templates/";
		} else {
			$cLayoutFolder	= "/core/templates/";
		}

		$cRootLayoutFolder	= $cLayoutFolder;

		//sometimes there is a layout folder in the page dir
		if (is_dir(PAGES . "/" . $this->cPage . "/layout/templates")) {
			$cLayoutFolder	= PAGES . "/" . $this->cPage . "/layout/templates/";
			$bPageLayout	= true;
		} else {
			$bPageLayout	= false;
		}

		//Skin for a page layout
		if ($bPageLayout) {
			if (($this->cSkin) && is_dir($cLayoutFolder . $this->cSkin)) {
				if (file_exists($cLayoutFolder . $this->cSkin . "/" . $cTemplate . ".tpl")) {
					$cLayoutFolder	.= $this->cSkin . "/";
				}
			}
		} else {
			if (($this->cSkin) && is_dir(SITEPATH . $cLayoutFolder . $this->cSkin)) {
				if (file_exists(SITEPATH . $cLayoutFolder . $this->cSkin . "/" . $cTemplate . ".tpl")) {
					$cLayoutFolder	.= $this->cSkin . "/";
				}
			}
		}

		//Page layout
		if ($bPageLayout) {
			if (file_exists($cLayoutFolder . $cTemplate . ".tpl")) {
				$this->cTemplate	= $cLayoutFolder . $cTemplate . ".tpl";
			} else {
				$this->cTemplate	= SITEPATH . $cRootLayoutFolder . $cTemplate . ".tpl";
			}
		} else {
			$this->cTemplate	= SITEPATH . $cLayoutFolder . $cTemplate . ".tpl";
		}
	}

	/**
	* Template::getCoreTemplate()
	*
	* @param strng $cTemplate
	* @desc This is the old method, you should use setCoreTemplate since your setting not getting
	* @return
	*/
	private function getCoreTemplate($cTemplate) {
		//Since this gets added to
		if (is_dir(SITEPATH . "/layout")) {
			$cLayoutFolder	= "/layout/";
		} else {
			$cLayoutFolder	= "/core/";
		}

		if (($this->cSkin) && is_dir(SITEPATH . $cLayoutFolder . $this->cSkin)) {
			if (file_exists(SITEPATH . $cLayoutFolder . $this->cSkin . "/templates/" . $cTemplate . ".tpl")) {
				$cLayoutFolder	.= $this->cSkin . "/";
			}
		} else {
			if (file_exists(SITEPATH . $cLayoutFolder . "/templates/" . $cTemplate . ".tpl")) {
				$this->cTemplate = SITEPATH . $cLayoutFolder . "templates/" . $cTemplate . ".tpl";
			} else {
				throw new Spaner($cTemplate . " Layout Template not found", 505);
			}
		}
	}

	/**
	 * Template::setTemplateNew()
	 *
	 * @desc This is to replace setTemplate, so that multiple param pages can be used
	 * @param string $cTemplate
	 * @param string $cAltPage
	 * @return null
	 */
	private function setTemplateNew($cTemplate = null, $cAltPage = null) {
		$cPath	= false;
		if (!$this->cFolder) {
			$this->cFolder = "/templates/";
		}

		//No template set
		if (!$cTemplate) {
			$cTemplate	= $this->cPage;
		}

		//Page
		if ($this->cPage) {
			$cPage	= PAGES . $this->cPage . $this->cFolder;
			$cTemplateTrue	= ($cTemplate ? $cTemplate : $this->cPage) . ".tpl";

			if (file_exists($cPage . $cTemplateTrue)) {
				$cPath = $cPage . $cTemplateTrue;
			}
		} else {
			if ($this->cDefault) {
				$cPage = PAGES . $this->cDefault . $this->cFolder;
				$cTemplateTrue = ($cTemplate ? $cTemplate : $this->cDefault) . ".tpl";

				if (file_exists($cPage . $cTemplateTrue)) {
					$cPath = $cPage . $cTemplateTrue;
				}
			} else {
				printRead("AHH");die();

				$cPage = PAGES . "news" . $this->cFolder;
				$cTemplateTrue = ($cTemplate ? $cTemplate : "news") . ".tpl";

				if (file_exists($cPage . $cTemplateTrue)) {
					$cPath = $cPage . $cTemplateTrue;
				}
			}
		}

		//Action
		if ($this->cAction) {
			$cTemplateTrue	= ($cTemplate ? $cTemplate : $this->cAction) . ".tpl";

			$cAction1	= PAGES . $this->cPage . ucfirst($this->cAction) . $this->cFolder;
			$cAction2	= PAGES . $this->cPage . "/" . $this->cAction . $this->cFolder;

			if (file_exists($cAction1 . $cTemplateTrue)) {
				$cPath = $cAction1 . $cTemplateTrue;
			} else if (file_exists($cAction2 . $cTemplateTrue)) {
				$cPath = $cAction2 . $cTemplateTrue;
			}
		}

		//Choice
		if ($this->cChoice) {
			$cTemplateTrue	= ($cTemplate ? $cTemplate : $this->cChoice) . ".tpl";

			$cChoice1	= PAGES . $this->cPage . "/" . $this->cAction . ucfirst($this->cChoice) . $this->cFolder;
			$cChoice2	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . $this->cFolder;
			$cChoice3	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cAction . ucfirst($this->cChoice) . $this->cFolder;

			if (file_exists($cChoice1 . $cTemplateTrue)) {
				$cPath = $cChoice1 . $cTemplateTrue;
			} else if (file_exists($cChoice2 . $cTemplateTrue)) {
				$cPath = $cChoice2 . $cTemplateTrue;
			} else if (file_exists($cChoice3 . $cTemplateTrue)) {
				$cPath = $cChoice3 . $cTemplateTrue;
			}
		}

		//cOthers
		if (isset($this->extraParams) && ($this->extraParams)) {
			for ($i = $this->extraParams; $i >= 0; $i--) {
				$cParam	= "cParam" . $i;
				if (isset($this->$cParam)) {
					$cTemplateTrue	= ($cTemplate ? $cTemplate : $this->$cParam) . ".tpl";

					$cParam1	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . "/" . $this->$cParam . $this->cFolder;
					$cParam2	= PAGES . $this->cPage . "/" . $this->cAction . "/" . $this->cChoice . "/" . $this->cFolder;

					if (file_exists($cParam1 . $cTemplateTrue)) {
						$cPath	= $cParam1 . $cTemplateTrue;
						break;
					}
				}
			}
		}

		//alt page
		if ($cAltPage) {
			$cTemplateTrue = ($cTemplate ? $cTemplate : $cAltPage) . ".tpl";

			$cAlt	= PAGES . $cAltPage . $this->cFolder;
			if (file_exists($cAlt . $cTemplateTrue)) {
				$cPath = $cAlt . $cTemplateTrue;
			}
		}

		//last resort
		if (!$cPath) {
			$cPath = PAGES . $this->cPage . $this->cFolder . $this->cPage . ".tpl";
		}

		//See if the path exists
		if (file_exists($cPath)) {
			$this->cTemplate = $cPath;
		} else {
			throw new Spanner($cTemplate . " template doesnt exist at " . $cPath, 500);
		}
	}

	/**
	 * Template::setTemplate()
	 *
	 * @param string $cTemplate The actual template file
	 * @param string $cAltPage The location of the page itself, e.g. news instead of /news
	 * @return
	 */
	public function setTemplate($cTemplate = null, $cAltPage = null) {
		return $this->setTemplateNew($cTemplate, $cAltPage);

		if (!$this->cFolder) {
			$this->cFolder = "/templates/";
		}

		//choices
		$cChoice1	= PAGES 	. $this->cPage 		. "/" . $this->cChoice .	$this->cFolder;
		$cChoice2	= PAGES 	. $this->cPage 		. "/" . $this->cChoice .	$this->cOrigFolder;

		$cChoice3	= PAGES		. $this->cPage		. "/" . $this->cAction .	"/"	. $this->cChoice . $this->cFolder;
		$cChoice4	= PAGES		. $this->cPage		. "/" . $this->cAction .	"/"	. $this->cChoice . $this->cOrigFolder;

		//actions
		$cAction1	= PAGES 	. $this->cPage		. "/" . $this->cAction .	$this->cFolder; //Action
		$cAction2	= PAGES 	. $this->cPage		. "/" . $this->cAction .	$this->cOrigFolder; //Action

		//Set the path to blank
		$cPath	= false;

		if ($cAltPage) {
			if ($this->cSkin) {
				$cPage	= PAGES		. $cAltPage			.	"/templates/" . $this->cSkin . "/";
			} else if ($this->cBrand) {
				$cPage	= PAGES		. $cAltPage			. 	"/templates/" . $this->cBrand . "/";
			} else {
				$cPage	= PAGES		. $cAltPage 		. 	"/templates/"; //Alt Page
			}

			$cPage1 	= $cPage;
		} else {
			$cPage1		= PAGES 	. $this->cPage		. 	$this->cFolder; //Page
			$cPage2		= PAGES 	. $this->cPage		. 	$this->cOrigFolder; //Page
		}

		//do the grabs
		if ($this->cChoice) { //if choice try to see if the files exist
			$cTemplate	= ($cTemplate ? $cTemplate : $this->cChoice) . ".tpl";

			if (file_exists($cChoice1 . $cTemplate)) { //choice might be the one
				$cPath = $cChoice1 . $cTemplate;
			} else if (file_exists($cChoice2 . $cTemplate)) { //original
				$cPath = $cChoice2 . $cTemplate;
			} else if (file_exists($cChoice3 . $cTemplate)) { //new, action+choice
				$cPath = $cChoice3 . $cTemplate;
			} else if (file_exists($cChoice4 . $cTemplate)) { //orig, action+choice
				$cPath = $cChoice4 . $cTemplate;
			}

			if (!$cPath) {
				if (file_exists($cAction1 . $cTemplate)) { //action since there is no choice so it must be a subselect
					$cPath = $cAction1 . $cTemplate;
				} else if (file_exists($cAction2 . $cTemplate)) { //action since there is no choice so it must be a subselect
					$cPath = $cAction2 . $cTemplate;
				}
			}

			if (!$cPath) {
				if (file_exists($cPage1 . $cTemplate)) { //no choice/action templates so it must be default
					$cPath = $cPage1 . $cTemplate;
				} else if (file_exists($cPage2 . $cTemplate)) { //no choice/action templates so it must be default
					$cPath = $cPage2 . $cTemplate;
				}
			}
		} else if ($this->cAction) { //if action try to see if its file exists
			$cTemplate = ($cTemplate ? $cTemplate : $this->cAction) . ".tpl";

			if (file_exists($cAction1 . $cTemplate)) {
				$cPath = $cAction1 . $cTemplate;
			} else if (file_exists($cAction2 . $cTemplate)) {
				$cPath = $cAction2 . $cTemplate;
			}

			if (!$cPath) {
				if (file_exists($cPage1 . $cTemplate)) {
					$cPath = $cPage1 . $cTemplate;
				} else if (file_exists($cPage2 . $cTemplate)) {
					$cPath = $cPage2 . $cTemplate;
				}
			}
		}

		if ($this->cPage) { //if page try the default one
			$cTemplate = ($cTemplate ? $cTemplate : $this->cPage) . ".tpl";

			if (!$cPath) {
				if (file_exists($cPage1 . $cTemplate)) {
					$cPath = $cPage1 . $cTemplate;
				} else if (file_exists($cPage2 . $cTemplate)) {
					$cPath = $cPage2 . $cTemplate;
				}
			}
		} else if (file_exists(PAGES . $cAltPage)) { //Alt Page
			$cTemplate = ($cTemplate ? $cTemplate : $cAltPage) . ".tpl";

			if (file_exists($cPage1 . $cTemplate)) {
				$cPath = $cPage1 . $cTemplate;
			} else if (file_exists($cPage2 . $cTemplate)) {
				$cPath = $cPage2 . $cTemplate;
			}
		}

		//No path set so it must be at the template for the page
		if (!$cPath) {
			$cPath = PAGES . $this->cPage . $this->cFolder . $this->cPage . ".tpl";
		}

		//no template set so it must be the default page thats the issue
		if (!isset($cTemplate)) {
			$cTemplate = $this->cPage;
		}

		//See if the path exists
		if (file_exists($cPath)) {
			$this->cTemplate = $cPath;
		} else {
			throw new Spanner($cTemplate . " template doesnt exist", 500);
		}
	}

	/**
	* Template::setLanguage()
	*
	* @param string $cLanguage
	* @return
	*/
	public function setLanguage($cLanguage) {
		$this->cLanguage = $cLanguage;
	}

	/**
	 * Template::setVars()
	 *
	 * @param string $cName
	 * @param mixed $mVars
	 * @return
	 */
	public function setVars($cName, $mVars) {
		if (is_array($mVars)) {
			foreach ($mVars as $cVarName => $cVar) {
				$this->aVars[$cName][$cVarName] = $cVar;
			}
		} else {
			$this->aVars[$cName] = $mVars;
		}
	}

	/**
	 * Template::addJS()
	 *
	 * @param string $cFile
	 * @param array $aVariables
	 * @return
	 */
	function addJS($cFile, $aVariables = false) {
		$cReturn = "<script type='text/javascript' src='/js/" . $cFile . ".js'>\n";

		if ($aVariables) {
			foreach ($aVariables as $cName => $cValue) {
				if ($cName) {
					$cReturn .= "var " . $cName . " = " . $cValue . ";\n";
				} else {
					$cReturn .= $cValue . ";\n";
				}
			}
		}

		$cReturn .= "</script>\n";
		$this->cJS .= $cReturn;
	}

	/**
	 * Template::addJSProperties()
	 *
	 * @param string $cJS
	 * @return
	 */
	function addJSProperties($cJS) {
        $cReturn = "<script type='text/javascript'>\n";
		$cReturn .= $cJS . "\n";
		$cReturn .= "</script>\n";

		$this->cExtraJS .= $cReturn;
	}

    /**
     * Template::addForm()
     *
     * @desc Add a form to the template
     * @return
     */
    function addForm() {
    	$oForm		= Form::getInstance($this);
    	$this->oForms	= $oForm;

    	return $this->oForms;
    }

    /**
    * @desc This is really only for ease of use
    */
    function getForm() {
    	return $this->addForm();
    }

    /**
     * Template::addFormed()
     *
     * @return
     */
    function addFormed() {
    	$oForm	= $this->addForm();

    	$this->oForms = $oForm;

    	return $this->oForms;
    }

	/**
	 * Template::getValidate()
	 *
	 * @desc Get the validator
	 * @todo Change to addValidator
	 * @return
	 */
	function getValidate() {
		$oValidate = Validator::getInstance($this->oForms);

		return $oValidate;
	}

	/**
	* Template::addValidator()
	*
	* @return
	*/
	function addValidator() {
		return $this->getValidator();
	}

	/**
	* Template:addPagination()
	*
	* @desc Adds pagination to a page
	* @param mixed $mList the list of items so that pagination can be created
	* @param int $iLimit the limit that can be shown in order to create the pagination
	* @param string $cAddress the address of the page that the pagination will be filtered to
	* @param bool $bStated if there needs to be an = at end instead of /
	* @return string
	*/
	function addPagination($mList, $cAddress, $iLimit, $bStated = false) {
		$cReturn 	= false;
		$iPage		= $this->iPage;

		$cNewAddress 	= $bStated 			? $cAddress . "&amp;num=" : $cAddress . "/";
		$iAmount		= is_array($mList)	? count($mList) : $mList;

		if ($iAmount > $iLimit) {
			$j = 2;
			$cReturn  = "<div class=\"pages\">\n";

			if ($iPage) {
				$cReturn .= "<img src=\"/images/layout/pages.png\" alt=\"Pages\" />&nbsp; Page <a href=\"" . $cAddress . "\">1</a>";
			} else {
				$cReturn .= "<img src=\"/images/layout/pages.png\" alt=\"Pages\" />&nbsp; Page <a class=\"selectedPage\" href=\"" . $cAddress . "\">1</a>";
			}

			for ($i = 0; $i < $iAmount; $i++) {
				if ($i > 0) {
					if ($i % $iLimit == 0) {
						if ($iPage == $j) {
							$cReturn .= ", <a class=\"selectedPage\" href=\"" . $cNewAddress . $j . "\">" . $j . "</a>";
						} else {
							$cReturn .= ", <a href=\"" . $cNewAddress . $j . "\">" . $j . "</a>";
						}
						$j++;
					}
				}
			}

			$cReturn .= "</div>";
		}

		$this->cPagination = $cReturn;
		return $this->cPagination;
	}

	/**
	 * Template::renderTemplate()
	 *
	 * @param bool $bEcho Echo the template rather than returning it
	 * @return mixed
	 */
	function renderTemplate($bEcho = null) {
		$cReturn	= false;

		if (file_exists($this->cTemplate)) {
			if ($this->oForms) {
				$this->setVars('cForm', $this->oForms->fullForm());
			} else { //this is incase you didnt add the form but your trying to call it
				$this->setVars("cForm", false);
			}

			//layout folder better name than core
			if (($this->cSkin) && is_dir(SITEPATH . "/layout/" . $this->cSkin)) {
				$cLayoutPath	= "/layout/" . $this->cSkin . "/";
			} else if (is_dir(SITEPATH . "/layout")) {
				$cLayoutPath = "/layout/";
			} else {
				$cLayoutPath = "/core/";
			}

			//check for old style
			if (!file_exists(SITEPATH . "templates/structure.struct")) { #really old method
				if (!file_exists(SITEPATH . "layout/structure.struct")) { #newer method
					$this->setVars("oHammer", Hammer::getHammer());
				}
			}

			//Get rid of the hammer object reference for templates tehy dont need it
			if (strstr($this->cTemplate, "tpl")) {
				unset($this->aVars["oHammer"]);
				#$this->setVars("oHammer", false);
			}

			$this->setVars("cExtraJS", $this->cExtraJS);
			$this->setVars("cPagination", $this->cPagination);
			$this->setVars('cJS', $this->cJS);

			//indented to show that stuff inside happens inside and then is cleaned after
			ob_start();
				extract($this->aVars, EXTR_PREFIX_SAME, "hammer::" . Hammer::$cWebSite);
				include($this->cTemplate);
				$cTemplate = ob_get_contents();
			ob_end_clean();

			if (isset($this->aSubTemplates[0])) {
				$iSub	= count($this->aSubTemplates);

				for ($i = 0; $i < $iSub; $i++) {
					if (file_exists($this->aSubTemplates[$i])) {
						ob_start();
							extract($this->aVars, EXTR_PREFIX_SAME, "hammer::" . Hammer::$cWebSite);
							include($this->aSubTemplates[$i]);
							$aTemplates[$i] = ob_get_contents();
						ob_end_clean();
					}
				}
			}

			//this is incase there are sub templates attached
			if (isset($aTemplates[0])) {
				$cChain 	= $cTemplate;
				$iTemplates	= count($aTemplates);
				for ($i = 0; $i < $iTemplates; $i++) {
					$cChain .= $aTemplates[$i];
				}

				$cReturn = $cChain;
			} else {
				//this is to fix a strange bug which might not exist in non ppc devices when used with php 5.2.10
				if (!isset($cTemplate[1])) {
					$cTemplate .= "&nbsp;";
				}

				$cReturn = $cTemplate;
			}
		} else {
			$cReturn = $this->errorTemplate($this->cTemplate);
		}

		if ($bEcho) {
			echo $cReturn;
		} else {
			return $cReturn;
		}
	}

	/**
	 * Template::setSubTemplate()
	 *
	 * @param string $cTemplate
	 * @param bool $bCore
	 * @return
	 */
	function setSubTemplate($cTemplate, $bCore = false) {
		//Layout
		if (($this->cSkin) && is_dir(SITEPATH . "/layout/" . $this->cSkin)) {
			$cLayoutFolder	= "/layout/" . $this->cSkin . "/";
		} else if (is_dir(SITEPATH . "/layout")) {
			$cLayoutFolder = "/layout/";
		} else {
			$cLayoutFolder = "/core/";
		}

		if ($bCore) {
			if ($this->cSkin) {
				$cSubTemplate	= SITEPATH . $cLayoutFolder . "templates/" . $this->cSkin . "/" . $cTemplate . ".tpl";
			} else {
				$cSubTemplate	= SITEPATH . $cLayoutFolder . "templates/" . $cTemplate . ".tpl";
			}
		} else {
			if ($this->cSkin) {
				$cSubTemplate	= PAGES . $this->cPage . "/templates/" . $this->cSkin . "/" . $cTemplate . ".tpl";
			} else {
				$cSubTemplate	= PAGES . $this->cPage . "/templates/" . $cTemplate . ".tpl";
			}
		}

		$this->aSubTemplates[] = $cSubTemplate;
	}

	/**
	 * Template::errorTemplate()
	 *
	 * @return
	 */
	private function errorTemplate($cCalled = false) {
		//Layout
		if (is_dir(SITEPATH . "/layout")) {
			$cLayoutFolder = "/layout/";
		} else {
			$cLayoutFolder = "/core/";
		}

		#header("HTTP/1.0 404 Not Found");
		if ($this->cError) {
			if (file_exists(SITEPATH . $cLayoutFolder . "templates/error.tpl")) {
				//Custom error page
				ob_start("ob_process");
					include(SITEPATH . $cLayoutFolder . "templates/error.tpl");
					$cTemplate = ob_get_contents();
				ob_end_clean();
			} else {
				$cTemplate = "<h1>Error</h1>\n";
				$cTemplate .= $this->cError . "<br />";

				switch($this->cPage){
					case "register": //Shall be changing register to be an actual page
						$cTemplate .= "This page might actually be at, <a href=\"/login/register/\">Here</a>";
						break;

					case "user": //Change this once the user module does actually exist
						$cTemplate .= "The user module hasn't been finished yet sorry";
						break;

					case "manager":
					default:
						$cTemplate .= "I have no idea where your trying to get to, but most likelly your trying to use a bug that doesnt exist";
						break;
				} // switch

				if (isset($_SERVER['HTTP_REFERER'])) {
					$cTemplate .= "<hr /><a href='" . $_SERVER['HTTP_REFERER'] . "'>Back</a>\n";
				} else {
					$cTemplate .= "<hr /><a href='/'>Back</a>\n";
				}
			}

			if (defined("404")) {
				header("HTTP/1.1 404 Not Found");
			}

			return $cTemplate;
		} else {
			$cMessage = "Template Doesnt exist:";
			//all the extras to diagnose
			if ($this->cTemplate) {		$cMessage .= " Called: "	. $this->cTemplate; }
			if ($cCalled) { 		$cMessage .= " Template: "	. $cCalled; }
			if ($this->cPage) {		$cMessage .= " Page: "		. $this->cPage; }
			if ($this->cAction) {		$cMessage .= " Action: "	. $this->cAction; }
			if ($this->cError) { 		$cMessage .= " Error: " 	. $this->cError; }
			if ($this->cSiteCalled) { 	$cMessage .= " SiteCalled: " 	. $this->cSiteCalled; }

			throw new Spanner($cMessage, 2);
		}
	}

	/**
	 * Template::__destruct()
	 *
	 */
	function __destruct() {
		$this->oHammer		= null;
		$this->oNails		= null;
		$this->oForms		= null;
		$this->cForm		= null;

		unset($this->oNails);
		unset($this->oForms);
		unset($this->cForm);
	}
}
